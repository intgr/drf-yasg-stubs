from typing import Any, Optional, Pattern, Callable, Type, List, Dict, Tuple

from django.http import HttpRequest
from django.http.response import HttpResponseBase
from rest_framework.request import Request
from rest_framework.schemas.generators import EndpointEnumerator as _EndpointEnumerator, SchemaGenerator
from rest_framework.views import APIView

from drf_yasg.openapi import Swagger, ReferenceResolver, Info

PATH_PARAMETER_RE: Pattern[str]

_ViewFunc = Callable[..., HttpResponseBase]

class EndpointEnumerator(_EndpointEnumerator):
    request: HttpRequest = ...
    def __init__(
        self, patterns: Optional[Any] = ..., urlconf: Optional[Any] = ..., request: Optional[HttpRequest] = ...
    ): ...
    def get_path_from_regex(self, path_regex: Any): ...
    def should_include_endpoint(
        self, path: Any, callback: Any, app_name: str = ..., namespace: str = ..., url_name: Optional[Any] = ...
    ): ...
    def replace_version(self, path: Any, callback: Any): ...
    def get_api_endpoints(
        self,
        patterns: Optional[Any] = ...,
        prefix: str = ...,
        app_name: Optional[Any] = ...,
        namespace: Optional[Any] = ...,
        ignored_endpoints: Optional[Any] = ...,
    ): ...
    def unescape(self, s: Any): ...
    def unescape_path(self, path: Any): ...

class OpenAPISchemaGenerator:
    endpoint_enumerator_class: Type[EndpointEnumerator] = ...
    reference_resolver_class: Type[ReferenceResolver] = ...
    info: Info = ...
    version: str = ...
    consumes: List[str] = ...
    produces: List[str] = ...
    _gen: SchemaGenerator
    def __init__(
        self,
        info: Info,
        version: str = ...,
        url: Optional[str] = ...,
        patterns: Optional[Any] = ...,
        urlconf: Optional[Any] = ...,
    ): ...
    @property
    def url(self) -> Optional[str]: ...
    def get_security_definitions(self) -> Dict[str, Dict[Any, Any]]: ...
    def get_security_requirements(
        self, security_definitions: Dict[str, Dict[Any, Any]]
    ) -> Optional[List[Dict[str, List[str]]]]: ...
    def get_schema(self, request: Optional[Request] = ..., public: bool = ...) -> Swagger: ...
    def create_view(self, callback: Any, method: Any, request: Optional[Any] = ...) -> _ViewFunc: ...
    def coerce_path(self, path: Any, view: Any): ...
    def get_endpoints(self, request: Optional[Request]) -> Dict[str, Tuple[Type[Any], List[Tuple[str, APIView]]]]: ...
    def get_operation_keys(self, subpath: Any, method: Any, view: Any): ...
    def determine_path_prefix(self, paths: Any): ...
    def should_include_endpoint(self, path: Any, method: Any, view: Any, public: Any): ...
    def get_paths_object(self, paths: Any): ...
    def get_paths(self, endpoints: Any, components: Any, request: Any, public: Any): ...
    def get_operation(self, view: Any, path: Any, prefix: Any, method: Any, components: Any, request: Any): ...
    def get_path_item(self, path: Any, view_cls: Any, operations: Any): ...
    def get_overrides(self, view: Any, method: Any): ...
    def get_path_parameters(self, path: Any, view_cls: Any): ...
